<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Cocoa Enhanced</title>
    <link>https://codergu64.github.io/post/</link>
    <description>Recent content in Post on Cocoa Enhanced</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 30 Jul 2019 20:55:27 +0800</lastBuildDate>
    
	<atom:link href="https://codergu64.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编程小记(二)</title>
      <link>https://codergu64.github.io/post/julythirty/</link>
      <pubDate>Tue, 30 Jul 2019 20:55:27 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/julythirty/</guid>
      <description> CVProgrammerBlog 编程小记(二) Java内存模型以及happens-before规则 JMM介绍  当多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获取正确的结果，那这个对象是线程安全的。————《深入理解Java虚拟机》
 出现线程安全的问题一般是因为主内存和工作内存数据不一致性和重排序导致的，而解决线程安全的问题最重要的就是理解这两种问题是怎么来的，那么，理解它们的核心在于理解java内存模型（JMM）。
在多线程条件下，多个线程肯定会相互协作完成一件事情，一般来说就会涉及到多个线程间相互通信告知彼此的状态以及当前的执行结果等，另外，为了性能优化，还会涉及到编译器指令重排序和处理器指令重排序。
内存模型抽象结构 在并发编程中主要需要解决两个问题：1. 线程之间如何通信；2.线程之间如何完成同步（这里的线程指的是并发执行的活动实体）。通信是指线程之间以何种机制来交换信息，主要有两种：共享内存和消息传递。Java内存模型是共享内存的并发模型，线程之间主要通过读-写共享变量来完成隐式通信。如果程序员不能理解Java的共享内存模型在编写并发程序时一定会遇到各种各样关于内存可见性的问题。
 共享变量 在java程序中所有实例域，静态域和数组元素都是放在堆内存中（所有线程均可访问到，是可以共享的），而局部变量，方法定义参数和异常处理器参数不会在线程间共享。共享数据会出现线程安全的问题，而非共享数据不会出现线程安全的问题。 JMM抽象结构模型 我们知道CPU的处理速度和主存的读写速度不是一个量级的，为了平衡这种巨大的差距，每个CPU都会有缓存。因此，共享变量会先放在主存中，每个线程都有属于自己的工作内存，并且会把位于主存中的共享变量拷贝到自己的工作内存，之后的读写操作均使用位于工作内存的变量副本，并在某个时刻将工作内存的变量副本写回到主存中去。JMM就从抽象层次定义了这种方式，并且JMM决定了一个线程对共享变量的写入何时对其他线程是可见的。   </description>
    </item>
    
    <item>
      <title>编程小记(一)</title>
      <link>https://codergu64.github.io/post/julytwenty-four/</link>
      <pubDate>Wed, 24 Jul 2019 16:55:08 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/julytwenty-four/</guid>
      <description>CVProgrammerBlog 编程小记(一) StringBuffer和StringBuilder的联系与区别 联系  当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。 和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。  区别  StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。 由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。  序列化 序列化和反序列化的概念  序列化：把对象转换为字节序列的过程称为对象的序列化。 反序列化：把字节序列恢复为对象的过程称为对象的反序列化。
 上面是专业的解释，现在来点通俗的解释 : &amp;gt; 在代码运行的时候，我们可以看到很多的对象，对象数据可以是一个，也可以是一类对象的集合。这些数据中，有些信息我们想让他持久的保存起来，那么这个序列化。就是把内存里面的这些对象给变成一连串的字节描述的过程，常见的就是变成文件。
什么情况下需要序列化  当你想把的内存中的对象状态保存到一个文件中或者数据库中时候 当你想用套接字在网络上传送对象的时候 当你想通过RMI传输对象的时候  序列化的实现需要实现接口Serializable
import java.io.Serializable; public class Student implements Serializable{ /** * 这里就是序列化 */ private static final long serialVersionUID = -5033541484838026394L; public String Name; public int Number; public Student(String n, int nu) { // TODO Auto-generated constructor stub Name = n; Number = nu; } }  指令重排  在计算机执行指令的顺序在经过程序编译器编译之后形成的指令序列，一般而言，这个指令序列是会输出确定的结果；以确保每一次的执行都有确定的结果。但是，一般情况下，CPU和编译器为了提升程序执行的效率，会按照一定的规则允许进行指令优化，在某些情况下，这种优化会带来一些执行的逻辑问题，主要的原因是代码逻辑之间是存在一定的先后顺序，在并发执行情况下，会发生二义性，即按照不同的执行逻辑，会得到不同的结果信息。</description>
    </item>
    
    <item>
      <title>Java数据结构与算法学习笔记（四）</title>
      <link>https://codergu64.github.io/post/maytwenty-seven/</link>
      <pubDate>Mon, 27 May 2019 13:07:04 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maytwenty-seven/</guid>
      <description>CVProgrammerBlog Java数据结构与算法学习笔记（四） 哈希表可以提供快速的插入操作和查找操作。第一次接触哈希表时，它的优点多得让人难以置信。不论哈希表中有多少数据，插入和删除（有时包括侧除）只需要接近常量的时间即0(1）的时间级。实际上，这只需要几条机器指令。
哈希表运算得非常快，在计算机程序中，如果需要在一秒种内查找上千条记录通常使用哈希表（例如拼写检查器)哈希表的速度明显比树快，树的操作通常需要O(N)的时间级。哈希表不仅速度快，编程实现也相对容易。
哈希表也有一些缺点它是基于数组的，数组创建后难于扩展某些哈希表被基本填满时，性能下降得非常严重，所以程序虽必须要清楚表中将要存储多少数据（或者准备好定期地把数据转移到更大的哈希表中，这是个费时的过程）。
然而如果不需要有序遍历数据，并且可以提前预测数据量的大小。那么哈希表在速度和易用性方面是无与伦比的。
而数据存储结构，就是数据的元素与元素之间在计算机中的一种表示，它的目的是为了解决空间规模问题，或者是通过空间规模问题从而间接地解决时间规模问题。我们知道，随着输入的数据量越来越大，在有限的内存里，不能把这些数据完全的存下来，这就对数据存储结构和设计存储的算法提出了更高的要求。所以我们需要对树、图结构有个初步的了解。
哈希表相关  哈希表示例   哈希表基于数组 关键字值的范围通常比数组容量大 关键字值通过哈希函数映射为数组的下标 英文字典是一个数据库的典型例子 一个关键字哈希化到已占有的数组单元，这种情况叫做冲突 冲突可以用两种方法解决：开放地址法和链地址法 在开放地址法中，把冲突的数据项放在数组的其他位置 在链地址法中，每个数组单元包装了包装了一个链表，把所有映射到同一数组下标的数据项都插在这个链表中 开放地址法：线性探测、二次探测和再哈希化 在线性探测中，步长总是1，所以如果x是哈希函数计算得到的数组下标，那么探测序列就是x，x+1，x+2，x+3，依次类推 找到一个特定项需要经过的步数叫做探测长度 在线性探测中，已填充单元的长度不断增加，它们叫做首次聚集，这会降低哈希表的性能 在二次探测中，x的位移是步数的平方，所以探测的序列是x，x+1,x+4,x+9,依此类推 二次探测消除了首次聚集，但是产生了二次聚集，它比首次聚集的危害略小 二次聚集的发生是因为所有映射到同一个单元的关键字，在探测过程中执行了相同的序列 发生上述的情况是因为步长只依赖于哈希值，与关键字无关 在再哈希法中，步长依赖于关键字，且从第二个哈希函数中得到 在再哈希法中，如果第二个哈希函数返回一个值s，那么探测的序列就是x,x+s,x+2s,x+3s,x+4s,依次类推，这里s由关键字得到，但探测过程中保持常量 装填因子是表中数据项数和数组容量的比值 开放地址法中的最大装填因子应该在0.5附近，若具有相同的装填因子，对于再哈希法来说，查找的平均探测长度是2 在开放地址法中，当装填因子接近1时，查找时间趋于无限 在开放地址法中，关键是哈希表不能装的太满 对于链地址法，装填因子为1比较合适，这时，成功的探测长度平均是1.5，不成功的是2.0 链地址法的探测长度随着装填因子变大而线性增长 字符串可以这样哈希化，每个字符乘以常数的不同次幂，求和，然后用取模操作符(%)缩减结果，以适应哈希表的容量 如果在Horner方法中用多项式表示哈希化，每一步中都应用取模操作符，以免发生溢出 哈希表的容量通常是一个质数，这在二次探测和再哈希法中非常重要 哈希表可用于外部存储，一种做法是用哈希表的单元存储磁盘文件的块号码  树相关  树示例   多叉树比二叉树有更多的关键字和节点 2-3-4树是多叉树，每个节点最多有三个关键字和四个子节点 多叉树中，节点中数据项按关键字升序排列 2-3-4树中，所有的插入都在叶节点上，所有的叶节点在同一层上 在2-3-4树中，有三种可能的节点：2-节点有1个关键字和2个子节点，3-节点有2个关键字和3个子节点，4-节点有三个关键字和4个子节点 2-3-4树中没有1-节点 在2-3-4树中查找时，检查每个节点的关键字。没有找到时，如果要查找节点的关键字比key 0小，下一个节点就是child 0；如果要查找节点的关键字在key 0和key 1之间，下一个节点就是child2；如果要查找的节点的关键字大于key 2，下一个节点就是child 3 在2-3-4树中插入需要在查找插入点的过程中，顺着树的路径向下分裂路径上每个满的节点 分裂根要创建两个新节点；分裂出另一个节点，创建一个新节点 只有分裂根时2-3-4树的高度才会增长 2-3-4树和红-黑树之间存在一对一的对应关系 要把2-3-4树转化成红-黑树，需要把每个2-节点变成黑色节点，把每个3-节点变成一个黑色的父节点和一个红色的子节点，把每个4-节点变成一个黑色的父节点和两个红色子节点 当3-节点转化成一个父节点和一个子节点时，每个节点都可以做父节点 2-3-4树中分裂节点和在红-黑树中进行颜色变换是一样的 红-黑树中的旋转对应于转换3-节点时在两种可能的（倾斜）方向间变化 2-3-4树的高度为logN，查找时间和高度成正比 2-3-4树很浪费空间，因为很多节点还不满一半 2-3树类似于2-3-4树，除了它只能有1个或2个数据项以及1、2或3个子节点 在2-3树中插入需要找到合适的叶节点，然后从叶节点开始向上分裂，直到找到不满的节点 外部存储的意思是在主存外面保存数据，通常是在磁盘上 外部存储器比主存大，便宜（每字节），但是慢 外部存储器中的数据通常需要在主存间来回传送，一次传送一块 在外部存储器中的数据可以按关键字顺序有序排列。这样查找很快，但插入（或删除）很慢 B-树是多叉树，每个节点可以有几十或者上百个关键字和子节点 B-树中子节点的个数总是比关键数的个数多1 为达到最好的性能，B-树通常在一个节点中保存一块的数据 如果查找条件涉及多个关键字，在文件的所有记录中顺序查找可能是最实用的方法  树结构简单实现，eg：</description>
    </item>
    
    <item>
      <title>Java数据结构与算法学习笔记（三）</title>
      <link>https://codergu64.github.io/post/maytwenty-six/</link>
      <pubDate>Sun, 26 May 2019 08:01:01 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maytwenty-six/</guid>
      <description>CVProgrammerBlog Java数据结构与算法学习笔记（三） 排序算法可以说是一项基本功，解决实际问题中经常遇到，针对实际数据的特点选择合适的排序算法可以使程序获得更高的效率，有时候排序的稳定性还是实际问题中必须考虑的，这篇博客对常见的排序算法进行整理，包括：插入排序、选择排序、冒泡排序、快速排序、堆排序、归并排序、希尔排序、二叉树排序、计数排序、桶排序、基数排序。
排序相关  希尔排序将增量应用到插入排序，然后逐渐缩小增量 n-增量排序表示每隔n个元素进行排序 被称为间隔排序或者间距排序的数列决定了希尔排序的排序间隔 常用的间隔序列是由递归表达式 h=3*h+1 生成的，h的初始值是1 希尔排序很难分析，但是它运行的时间复杂度大约是O(N*(logN)^2)，这比时间复杂度为O(N^2)的排序算法要快，例如比插入排序快，但是比时间复杂度O(N*logN)的算法慢，例如比快速排序慢 划分数组就是把数组分成两个子数组，在一组中所有的数据项关键字的值都小于指定的值，而在另一组中所有的数据项关键字的值都大于或等于给定值 枢纽是在划分过程中确定数据项应该放在哪一组的值。小于枢纽的数据项都放在左边一组，而大于枢纽的数据项都放在右边一组 在划分算法中，在各自的while循环中的两个数组下标的指针，分别从数组的两端开始，相向移动，在查找需要交换的数据项 当一个数组下标指针找到一个需要交换的数据项时，它的while循环终止 当两个while循环都终止时，并且两个子数组的下标指针相遇或者交错，则划分过程结束 划分过程有线性的时间复杂度O(N)，做N+1或N+2次比较小于N/2次交换 划分算法的内部while循环需要额外的检测，以防数组下标越界 快速排序划分一个数组，然后递归调用自身，对划分得到的两个子数组进行快速排序 只含一个数据项的子数组定为已经有序，这一点可以作为快速排序算法的基值（终止）条件 快速排序算法划分时的枢纽是一个特定数据项关键字的值，这个数据项被称为pivot（枢纽） 在快速排序的简单版本中，总是由子数组的最右端的数据项作为枢纽 划分的过程中枢纽总是放在被划分子数组的右界，它不包含在划分过程中 划分之后枢纽也换位，被放在两个划分子数组之间，这就是枢纽的最终排序位置 快速排序的简单版本中，对已经有序的数据项排序的执行效率只有O(N^2) 更高级的快速排序版本中，枢纽是子数组的第一个、最后一个以及中间一个数据项的中值，这称为“三数据项取中”划分 三数据项取中划分中有效的解决了对已有序的数据项时执行效率仅有O(N^2)的问题 在数据项取中划分中，在对左端、中间以及右端的数据项取中值的同时对他们进行排序 这个排序算法清除了划分算法内部while循环中对数据的越界检测 快速排序算法的时间复杂度为O(N*logN) 子数组小于一定的容量（切割界限、cut off）时用另一种方法来排序，而不用快速排序 通常用插入排序对小于切割界限的子数组排序 在快速排序已经大于切割界限的子数组排序完之后，插入排序也可用于整个数组 基数排序的时间复杂度可快速排序相同，只是它需要两倍的存储空间  堆相关  在一个升序优先级队列中，最大关键字的数据项被称为有最高的优先级，反之，降序中优先级最高的是最小的数据项 优先级队列是提供了数据插入和移除最大（或者最小）数据项方法的抽象数据类型（ADT) 堆是优先级队列ADT的有效实现形式 堆提供移除最大数据项和插入的方法，时间复杂度都为O(logN) 最大的数据项总是在根的位置上 堆不能有序的遍历所有的数据，不能找到特定关键字数据项的位置，也不能移除特定关键字的数据项 堆通常用数组来实现，表现为一棵完全二叉树。根节点的下标为0，最后一个节点的下标为N-1 每个节点的关键字都小于它的父节点，大于它的子节点 要插入的数据项总是先被存放到数组第一个空的单元中，然后再向上筛选它至适当的位置 当从根移除一个数据项时，用数组中最后一个数据项取代它的位置，然后再向下筛选这个节点至适当位置 向上筛选和向下筛选算法可以被看作是一系列的交换，但更有效地做法是进行一系列复制 可以更改任一个数据项的优先级。首先，更改它的关键字。如果关键字增加了，数据项就向上筛选；如果关键字减少了，数据项就向下筛选 堆的实现可以基于二叉树（不是搜索树），它映射堆的结构：称为树堆 存在在树堆中查找最后一个节点或者第一个空的单元的算法 堆排序是一种高效的排序过程，它的时间复杂度为O(N*logN) 在概念上堆排序的过程包括先在堆中插入N次，然后再做N次移除 通过对无序数组中的N/2个数据项使用向下筛选算法，而不做N次插入，可以使堆排序的运行速度更快 可以使用同一个数组来存放初始无序的数据，堆以及最后有序的数据。因此，堆排序不需要额外的存储空间  每种排序的原理和实现 插入排序 遍历数组，遍历到i时，a0,a1&amp;hellip;ai-1是已经排好序的，取出ai，从ai-1开始向前和每个比较大小，如果小于，则将此位置元素向后移动，继续先前比较，如果不小于，则放到正在比较的元素之后。可见相等元素比较是，原来靠后的还是拍在后边，所以插入排序是稳定的。
当待排序的数据基本有序时，插入排序的效率比较高，只需要进行很少的数据移动。
void insertion_sort (int a[], int n) { int i,j,v; for (i=1; i&amp;lt;n; i++) { //如果第i个元素小于第j个，则第j个向后移动 for (v=a[i], j=i-1; j&amp;gt;=0&amp;amp;&amp;amp;v&amp;lt;a[j]; j--) a[j+1]=a[j]; a[j+1]=v; } }  选择排序 遍历数组，遍历到i时，a0,a1&amp;hellip;ai-1是已经排好序的，然后从i到n选择出最小的，记录下位置，如果不是第i个，则和第i个元素交换。此时第i个元素可能会排到相等元素之后，造成排序的不稳定。</description>
    </item>
    
    <item>
      <title>Java数据结构与算法学习笔记（二）</title>
      <link>https://codergu64.github.io/post/maytwenty-five/</link>
      <pubDate>Sat, 25 May 2019 08:36:21 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maytwenty-five/</guid>
      <description>CVProgrammerBlog Java数据结构与算法学习笔记（二） 紧接着上一次笔记，我们今天来看一下专用数据存储结构以及链表和递归相关的知识！
栈、队列、优先级队列相关  栈、队列、优先级队列也被称为专用数据存储结构 栈、队列和优先级队列是经常用于简化某些程序操作的数据结构 在这些数据结构中，只有一个数据项可以被访问 栈允许访问最后一个插入的数据项 栈中重要的操作是在栈顶压入一个数据项，以及从栈底移除一个数据项 队列只允许访问第一个插入的数据项 队列的重要操作是在队尾插入数据项和在队头移除数据项 队列可以实现为循环队列，它基于数组，数组下标可以从数据末端回绕到数组开始的位置 优先级队列允许访问最小（或者有时最大的）的数据项 优先级队列的重要操作是有序的插入新数据项和移除关键字最小的数据项 这些数据结构可以用数组实现，也可以用其他机制（例如链表）来实现 普通算术表达式是用中缀表达式表示的，这种命名的原因是操作符写在两个操作数的中间 在后缀表达法中，操作符跟在两个操作数的后面 算术表达式求值通常都是先转换成后缀表达式，然后求后缀表达式的值 在中缀表达式转换到后缀表达式以及求后缀表达式的值的过程里，栈都是很有用的工具     数据结构 插入 删除 注释     栈（数组或链表） O(1) O(1) 删除最后插入的   队（数组或链表） O(1) O(1) 删除最先插入的   优先级队列（有序数组） O(N) O(1) 删除优先级最高的   优先级队列（堆） O(logN) O(logN) &amp;ndash;    专用数据存储结构  链表相关  链表包含一个linkList对象和许多Link对象 LinkedList对象包含一个引用，这个引用通常叫做first，它指向链表的第一个链结点 每个Link对象包含数据和一个引用，通常叫做next，它指向链表的下一个链结点 next字段为null意味着链表的结尾 在表头插入链结点要把新链结点的next字段指向原来的第一个链结点，然后把first指向新链结点 在表头删除链结点要把first指向first.next 为了遍历链表可以找到拥有特定值的链结点。一旦找到，可以显示、删除或用其他方式操作该链结点 新链结点可以插在某个特定值的链结点的前面或者后面，首先要遍历找到这个链结点 双端链表在链表中维护一个指向最后一个链结点的引用，它通常和first一样，叫Last 双端链表允许在队尾插入数据项 抽象数据类型(ADT)是一种数据存储类，不涉及它的实现 栈和队列都是ADT，它们既可以用数组实现，又可以用链表实现 有序链表中，链结点按照关键字升序（有时是降序）排列 在有序链表中插入需要O(N)的时间，因为必须找到正确的接入点。最小链结点的删除需要O(1)的时间 双向链表中，每个链结点包括对前一个链结点的引用，同时有对后一个链结点的引用 双向链表允许反向遍历，可以从表尾删除 迭代器是一个引用，它被封装在类对象中，这个引用指向相关联的链表中的链结点 能用迭代器遍历链表，在迭代的链结点（或所有链结点）上执行某些操作  递归相关  一个递归的方法每次用不同的参数值反复调用自身 某种参数值使递归的方向返回，而不用调用自身，这称为基值情况 当递归方法返回时，递归过程通过逐渐完成各层方法实例的未执行部分，而从最内层返回到最外层的原始调用处 三角数字是它本身以及所有比它小的数字的和 一个数的阶乘是它本身和所有比它小的数的乘积 三角数字和阶乘都可以通过递归的方法或者简单的循环来实现 一个单词的全排列可以通过反复的轮换它的字母以及全排列它最右边的n-1个字母来递归得到 二分查找可以通过检查查找关键字在有序序列的哪一半，然后在这一半做相同的事情，这些都可以用递归实现 汉诺塔难题可以递归来解决：把除了最底端盘子外的所有盘子形成的子树移动到一个中介塔座上，然后把最底端的盘子移动到目标墙座上，最终把那个子树移动到目标塔座上 归并两个有序数组意思是创建第三个数组，这个数组按顺序存储从这两个有序数组中取到的所有数据项 在归并排序中，一个大数组的单个数据项的子数组归并为两个数据项的子数组，然后两个数据项的子数组归并为4个数据项的子数组，如此下去直到所有的数组数据项有序 归并排序需要O(N*logN)时间 归并排序需要一个大小等于原来数组的工作空间 对于三角数字、阶乘、单词字母全排列以及二分查找，它们的递归方法只包含一次对自身的调用 对于汉诺塔和归并排序问题，它们的递归包括两次递归调用 任何可以用递归完成的操作都可以用一个栈来实现 递归的方法可能效率低。如果是这样的话，有时可以用一个简单循环或者是一个基于栈的方法来替代它  简单递归训练 在控制台输出0-9的数字</description>
    </item>
    
    <item>
      <title>Java数据结构与算法学习笔记（一）</title>
      <link>https://codergu64.github.io/post/maytwenty-four/</link>
      <pubDate>Fri, 24 May 2019 11:21:13 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maytwenty-four/</guid>
      <description>CVProgrammerBlog Java数据结构与算法学习笔记（一） 相信了解编程的人，都对数据结构与算法不陌生。它们是编程中的重要组成部分，不仅是基础，更是衡量一个程序优秀与否的指标。而且所有计算机语言的数据结构都大同小异，我们掌握了它学习新的计算机语言就没有那么晦涩难懂了。所以学好数据结构和算法至关重要，而我们就以Java为例，讲一点我学习中总结的干货，希望大家也可以多多补充，共同进步！
数据结构的特性    数据结构 优点 缺点     数组 插入快，如果知道下标，可以非常快的存取 查找慢，删除慢，大小固定   有序数组 比无序数组查找快 删除和插入慢，大小固定   栈 提供后进先出方式的存取 存取其他项很慢   队列 提供先进先出方式的存取 存取其他项很慢   链表 插入快，删除快 查找慢   二叉树 查找、插入、删除都快（如果树保持平衡） 删除算法复杂   红-黑树 查找、插入、删除都快，树总是平衡的 算法复杂   2-3-4树 查找、插入、删除都快，树总是平衡的，类似的树对磁盘存储有用 算法复杂   哈希表 如果关键字已知，则存储极快，插入快 删除慢，如果不知道关键字则存储很慢，对存储空间使用不充分   堆 插入、删除快，对最大数据项的存取很快 对其他数据存取慢   图 对现实世界建模 有些算法慢且复杂    基本数据类型    名称 大小（以位记） 取消范围     boolean 1 true或false   byte 8 -128~+127   char 16 &amp;lsquo;\u0000&amp;rsquo;~\uFFFF&amp;rdquo;   short 16 -32768~+32767   int 32 -2147483648~+2147483647   long 64 -9223372036854775808~-9223372036854775807   float 32 约10^(-38)~10^(+38);7位有效数字   double 64 约10^(-308)~10^(+308);15位有效数字    数据结构与算法相关  数据结构是指数据在计算机内存空间中或磁盘中的组织形式 正确选择数据结构会使程序效率大大提高 算法是完成特定任务的过程 在Java中，算法经常通过类的方法来实现 大部分数据结构和算法经常被用来建造数据库 一些数据结构的用途是作为程序员的工具，他们帮助执行算法 其他的数据结构可以模拟现实世界中的情况，例如城市之间的电话线网 数据库是由许多类似的记录组成的数据存储的集合 一条记录经常表示现实世界中的一个事物，例如一名雇员或一个汽车零件 一条记录被分成字段。每个字段都存储了由这个记录所描述事物的一条特性 一个关键字是一条记录中的一个字段，通过它可以对数据进行很多操作。例如。人事记录可以通过LastName字段进行排序  数组与时间复杂度相关  Java中的数组是对象，由new操作符创建 无序数组可以提供快速的插入，但查找和删除较慢 将数组封装到类中可以保护数组不被随意修改 类的接口由类用户可访问的方法（有时还有字段）组成 有序数组可以使用二分查找 线性查找需要的时间与数组中数据项的个数成正比 二分查找需要的时间与数组中数据项的个数的对数成正比 大O表示法为比较算法的速度提供了一种方便的方法 O(1)级时间的算法是最好的，O(logN)次之，O(N)为一般，O(N^2)最差  排序算法相关  排序包括比较数组中数据项的关键字和移动相应的数据项（实际上是数据项的引用），直到它们排好序位置 不变性是指算法运行时保持不变的条件 冒泡排序是算法中效率最差的算法，但它最简单 插入排序算法是O(N^2)排序算法中应用最多的 如果具有相同关键字的数据项、经过排序他们的顺序保持不变，这样的排序就是稳定的 冒泡、插入排序算法除了需要原始数据之外，都只需要一个临时变量  排序算法比较    排序 平均情况 最坏情况 比较 附加存储     冒泡排序 O(N^2) O(N^2) 及格 不需要   选择排序 O(N^2) O(N^2) 良好 不需要   插入排序 O(N^2) O(N^2) 优良 不需要   希尔排序 O(N^(3&amp;frasl;2)) O(N^(3&amp;frasl;2)) &amp;ndash; 不需要   快速排序 O(N*logN) O(N^2) 优良 不需要   归并排序 O(N*logN) O(N*logN) 良好 需要   堆排 O(N*logN) O(N*logN) 良好 不需要    感谢 在这里感谢相关书籍及各大博主的技术博客，同时感谢开源时代为学习带来的便利，为我的知识总结打下良好的基础，我也将在以后的学习中养成良好的习惯，多多总结，多多分享！</description>
    </item>
    
    <item>
      <title>SpringMVC学习录（一）</title>
      <link>https://codergu64.github.io/post/maytwenty/</link>
      <pubDate>Mon, 20 May 2019 14:27:43 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maytwenty/</guid>
      <description>CVProgrammerBlog SpringMVC学习录（一） SpringMVC是什么？  SpringMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了Web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。
 SpringMVC使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，SpringMVC也就是要简化我们日常的Web开发。
 与之相反的是基于组件的、事件驱动的Web框架，如Tapestry、JSF等，在此就不一一介绍了。
 SpringMVC也是服务到工作者模式的实现，但进行可优化。前端控制器是DispatcherServlet；应用控制器其实拆为处理器映射器（Handle Mapping）进行处理器管理和视图解析器（View Resolve）进行视图管理；页面控制器/动作/处理器为Controller接口（仅包含ModelAndView handleRequest(request,response)方法）的实现（也可以是任何的POJO类）；支持本地化（Locale）解析、主题（Theme）解析及文件上传等；提供了非常灵活的数据验证、格式化和数据绑定机制；提供了强大的约定大于配置（惯例优先原则）的契约式编程支持。
 SpringMVC通常应用在：①传统Web应用项目 ②Spring生态系统
  SpringMVC处理请求流程  MVC工作原理图  第一步：用户发送请求到前端控制器（DispatcherServlet）
第二步：前端控制器请求HandlerMapping查找Handler，可根据xml配置、注解进行查找
第三步：处理器映射器HandlerMapping向前端控制器返回Handler
第四步：前端控制器调用处理器适配器去执行handler
第五步：处理器适配器执行Handler
第六步：Handler执行完成后给适配器返回ModelAndView
第七步：处理器适配器向前端控制器返回ModelAndView（ModelAndView是SpringMVC框架的一个底层对象，包括Model和View）
第八步：前端控制器七年供求视图解析器去进行视图解析，根据逻辑视图名来解析真正的试图
第九步：视图解析器向前端控制器返回View
第十步：前端控制器进行视图渲染，就是将模型数据（在ModelAndView对象中）填充到request域
第十一步：前端控制器向用户响应结果
 下面我们对上面出现的一些组件进行解释：     组件名 是否需要程序员开发 作用及注意事项     前端控制器DispatcherServlet 否 作用：接受请求，相应结果，相当于转发器，中央处理器。有了DispatcherServlet减少了其他组件之间的耦合度   处理器映射器HandlerMapping 否 作用：根据请求的url查找Handler   处理器适配器HandlerAdapter 否 作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler   处理器Handler 是 注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler   视图解析器ViewResolver 否 作用：进行试图解析，根据逻辑视图名解析成真正的视图（View）   视图View 是 注意：View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf&amp;hellip;)    ps：不需要程序员开发的，需要程序员配置一下即可</description>
    </item>
    
    <item>
      <title>Java编程思想（四）</title>
      <link>https://codergu64.github.io/post/maynineteen/</link>
      <pubDate>Sun, 19 May 2019 07:59:38 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maynineteen/</guid>
      <description>CVProgrammerBlog Java编程思想（四） 在程序中，错误可能产生于程序员没有预料到的各种情况，或者超出程序员可控范围的环境，例如用户的坏数据、试图打开一个不存在的文件等。Java中的异常（Exception）又称为例外，是一个在程序执行期间发生的事件，它中断正在执行的程序的正常指令流。为了能够及时有效地处理程序中的运行错误，必须使用异常类。
Java异常基本概念  Java使用异常来提供一致性的错误报告模型；且可集中错误处理；且任务代码与异常代码分割开来，易于理解和维护 虽然异常处理理论有终止模型、恢复模型两种，但恢复模型很难优雅地做到，∴并不实用，实际中大家都是转向使用终止模型代码 一个异常抛出后发生的两件事：① 使用new在堆上创建异常对象；② 异常处理机制开始接管流程（当前的执行流程被终止） 标准异常类均有两个ctor：① default ctor； ② 带字符串参数的ctor Throwable是异常类型的根类 catch异常时，try中抛出的是子类异常，但catch的是基类异常也是OK，但若catch子类异常和基类异常的子句同时存在时，应将基类catch子句放在后面避免“屏蔽”现象发生  抛出异常 + 捕获异常 抛出异常（throw）：
if( t==null ) throw new NullPointerException(); // 异常对象用new创建于堆上  捕获异常（try + catch）：
try { ... } catch( Type1 id1 ) { // 处理Type1类型的异常代码 } catch( Type2 id2 ) { // 处理Type2类型的异常代码 }   虽然上面的id1和id2在处理异常代码中可能用不到，但不能少，必须定义 异常发生时，异常机制搜寻参数与异常类型相匹配的第一个catch子句并进入  创建自定义异常 创建不带参数ctor的自定义异常类：
// 自定义异常类（default ctor） class SimpleException extends Exception {} ------------------------------------------------------------ // 客户端代码 public class UseException { public void fun throws SimpleException { System.</description>
    </item>
    
    <item>
      <title>Java编程思想（三）</title>
      <link>https://codergu64.github.io/post/mayeighteen/</link>
      <pubDate>Sat, 18 May 2019 08:19:14 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/mayeighteen/</guid>
      <description>CVProgrammerBlog Java编程思想（三） 内部类不是很好理解，但说白了其实也就是一个类中还包含着另外一个类。如同一个人是由大脑、肢体、器官等身体结果组成，而内部类相当于其中的某个器官之一，例如心脏：它也有自己的属性和行为（血液、跳动）。显然，此处不能单方面用属性或者方法表示一个心脏，而需要一个类。而心脏又在人体当中，正如同是内部类在外部内当中。
内部类的基本概念  可将一个类的定义置于另一个类定义的内部 内部类允许将逻辑相关的类组织在一起，并控制位于内部的类的可见性 甚至可将内部类定义于一个方法或者任意作用域内！ 当然，内部类 ≠ 组合 内部类拥有其外围类 所有元素的 访问权 更有甚，嵌套多层的内部类能透明地访问所有它所嵌入的外围类的所有成员  举一个典型的例子，用Java内部类实现的迭代器模式
// 接口 ------------------------------------------------------------- public interface Selector { boolean end(); Object current(); void next(); } // 外部类（集合类） + 内部类（迭代器类） ------------------------------------------------------------- public class Sequence { // 外部类（代表一个集合类） private Object[] items; private int next = 0; public Sequence( int size ) { items = new Object[size]; } public void add( Object x ) { if( next &amp;lt; items.</description>
    </item>
    
    <item>
      <title>Java编程思想（二）</title>
      <link>https://codergu64.github.io/post/mayseventeen/</link>
      <pubDate>Fri, 17 May 2019 11:22:45 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/mayseventeen/</guid>
      <description>CVProgrammerBlog Java编程思想（二） Java是站在巨人的肩上成功的，它是在C&amp;amp;C++的基础上进一步的开发。因此，Java吸取了很多以前的教训，加入自己很多独创的方式。在程序语言发展初期，许多C程序员经常忘记初始化变量，在程序结束后也经常忘记对创建的数据类型进行释放内存，造成内存泄漏。这些&amp;rdquo;不安全&amp;rdquo;的编程方式当然需要程序员有良好的编程习惯，但如果编程语言能够加入自动清理与初始化的工作，这会大大降低开发成本。随着技术的发展，C++语言引入了构造器（constructor），即在创建对象自动调用的初识方法，Java语言采用这一方法，并加入垃圾回收器(GC)，负责自动回收用户创建的内存，进一步降低程序员的开发成本。
关于构造器和初始化： 无参构造器 = 默认构造器 = 用户未写构造器帮忙自动创建的 若自行定义了构造器（无论参数有否），编译器便停止默认创建动作 + 类里的对象引用默认初始化为NULL，基本类型初始化为0 + 需要注意的是：构造器也是类的静态方法，而且无返回值，一个类中至少有一个构造器
class cat { int age; cat() { print(&amp;quot;Input cat&#39;s age&amp;quot;); age = 0; } cat(int initialAge) { age = initialAge; print(&amp;quot;Creating new age that is &amp;quot; + age + &amp;quot; years old.&amp;quot;); } void info() { print(&amp;quot;Cat is &amp;quot; + age + &amp;quot; years old.&amp;quot;); } void info(String s) { print(s + &amp;quot;: Cat is &amp;quot; + height + &amp;quot; years old.</description>
    </item>
    
    <item>
      <title>Java编程思想（一）</title>
      <link>https://codergu64.github.io/post/maysixteen/</link>
      <pubDate>Thu, 16 May 2019 14:43:09 +0800</pubDate>
      
      <guid>https://codergu64.github.io/post/maysixteen/</guid>
      <description>CVProgrammerBlog Java编程思想（一） 说到Java，大家都不陌生，想要学好这门编程语言，首先我觉得了解它的编程思想是最重要的。如果把Java的语法比作是四驱车的零部件，算法比作是变速箱，那么Java的编程思想就应该是驾驶这辆四驱车的驾驶员了。作为驾驶员，可能需要考虑到很多东西，比如：目的地是哪里、需要多长的时间、挂什么挡位、加多少油门&amp;hellip;&amp;hellip;话不多说，让我们一起学习Java的编程思想吧！
万物皆对象 C++和Java作为面向对象的编程语言，都表达着对现实世界的理解和抽象，而Java 在这方面做的更加纯粹，可能是因为C++为C提供了更多后向兼容的能力吧。由于Java是通过REFERENCE来操作对象的，所以我们需要在引用对象之初先对其初始化。
对象需要由我们来创建，而不需要我们去销毁:  对于基本类型
·基本类型有其包装器类，这才允许其创建于heap之中，当然包装完之后也不能叫基本类型对象了 ·无需用new，Java视其为为引用的自动变量，并置于stack中 ·Java所有数值都有正负，不支持无符号 ·BigInteger和BigDecimal是Java支持的两大高精类型  对于数组
·java在每个数组上用了一点内存开销以及运行时的下标检查为代价，带来了收益是： java确保数组会被初始化（对象数组元素初始化为null，基本类型数组元素初始化为0），且不会越界访问  对于class
·基本数据类型成员会确保有默认值（但该条款不适用与局部变量） ·称呼上惯用方法来取代函数；方法名和参数列表成为方法签名；调用方法的行为称为发消息给对象   在一个作用域中，Java规定较小作用域不允许覆盖较大的作用域： { int x = 11; { int x = 22; //覆盖不合法 } }  在Java中，直接使用类名来引用static对象很常见。以下是对局部对象，static局部对象，static全局对象的部分总结：    比较类别 局部对象 static局部对象 static全局对象     定义位置 函数内 函数内 函数外   存储位置 栈区 全局数据区 全局数据区   访问作用域 只能函数内被访问 只能函数内被访问 能全局被访问   销毁时间 函数末尾 程序结束时 程序结束时    在一个Java程序中，我们需要注意：  一个Java源码文件 = 一个编译单元 java.</description>
    </item>
    
  </channel>
</rss>